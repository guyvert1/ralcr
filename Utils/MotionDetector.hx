import flash.display.Sprite;import flash.display.BitmapData;import flash.display.Bitmap;import flash.display.BlendMode;import flash.events.Event;import flash.filters.BlurFilter;import flash.filters.ColorMatrixFilter;import flash.geom.Rectangle;import flash.geom.Point;import flash.media.Video;import flash.media.Camera;class MotionDetector extends Sprite {		var detection :Sprite;	var bf :BlurFilter;	var cmf :ColorMatrixFilter;		var olddata :BitmapData;	var newdata :BitmapData;	var diffdata :BitmapData;		var oldbm :Bitmap;	var newbm :Bitmap;	var diffbm :Bitmap;		var display :Sprite;	var diffholder :Sprite;		var detectionholder :Sprite;	var detectionbmd :BitmapData;	var detectionbm :Bitmap;		var thresholdbmd :BitmapData;	var thresholdbm :Bitmap;	var thresholdholder :Sprite;		var video :Video;			var running :Bool;	var enableDrawing :Bool;		public var rectColor :UInt;	public var rectThickness :UInt;	public var detectionRect :Rectangle;			public function new (x, y, w, h, ?cam:Camera, ?autoStart:Bool=true) {		super();				this.x = x;		this.y = y;				running = false;		enableDrawing = true;		rectColor = 0xFF0066;		rectThickness = 3;				video = new Video (w, h);		addChild ( video );				detection = new Sprite();		addChild ( detection );		bf = new BlurFilter (4, 4, 4);		cmf = new ColorMatrixFilter ([		   5,5,5,0,0,		   5,5,5,0,0,		   5,5,5,0,0,		   0,0,0,6,0		   ]);		olddata = new BitmapData (w, h, false, 0);		newdata = new BitmapData (w, h, false, 0);		diffdata = new BitmapData (w, h, false, 0);		oldbm = new Bitmap ( olddata );		newbm = new Bitmap ( newdata );		diffbm = new Bitmap ( diffdata );		display = new Sprite();		display.addChild ( newbm );		display.addChild ( oldbm );		oldbm.blendMode = BlendMode.DIFFERENCE;		diffholder = new Sprite();		diffholder.addChild ( diffbm );		detectionholder = new Sprite();		detectionbmd = new BitmapData (w, h, true, 0x000000);		detectionbm = new Bitmap ( detectionbmd );		detectionholder.addChild ( detectionbm );		thresholdbmd = new BitmapData (Math.round(video.width), Math.round(video.height), false, 0x000000);		thresholdbm = new Bitmap ( thresholdbmd );		thresholdholder = new Sprite();		thresholdholder.addChild ( thresholdbm );		if (cam != null) {			video.attachCamera ( cam );			if (autoStart) {				startDetection();			}		}	}	public function attachCamera (camera:Camera) :Void {		video.attachCamera ( camera );	}	public function startDetection() :Void {		running = true;		this.addEventListener (Event.ENTER_FRAME, loop);	}	public function stopDetection() :Void {		running = false;		this.removeEventListener (Event.ENTER_FRAME, loop);	}		public function getEnabled () :Bool {		return running;	}	public function getMirroredDetectionRect () :Rectangle {		if (!running) {			return new Rectangle();		}		var rect:Rectangle = new Rectangle();		rect.x = video.width - detectionRect.x - detectionRect.width;		rect.y = detectionRect.y;		rect.width = detectionRect.width;		rect.height = detectionRect.height;		return rect;	}		public function setEnableDrawing (value:Bool) :Void {		enableDrawing = value;		if (!enableDrawing)			detection.graphics.clear();	}		function loop (e:Event) :Void {		olddata.draw ( newdata );		newdata.draw ( video );		newdata.applyFilter (newdata, newdata.rect, new Point(0, 0), bf);		diffdata.draw ( display );		diffdata.applyFilter (diffdata, diffdata.rect, new Point(0, 0), bf);		diffdata.applyFilter (diffdata, diffdata.rect, new Point(0, 0), cmf);		detectionbmd.draw ( diffbm );		thresholdbmd.threshold (detectionbmd, detectionbmd.rect, new Point(0, 0), '<', 0xCCCCCC, 0x000000, 0xFFCC00, true);		detectionRect = thresholdbmd.getColorBoundsRect (0xFFFFFF, 0xFFFFFF, true);		draw();	}	function draw():Void{		if (detectionRect.width > 10 && detectionRect.height > 10) {			if (enableDrawing) {				detection.graphics.clear();				detection.graphics.lineStyle (rectThickness, rectColor);				detection.graphics.drawRect (detectionRect.x, detectionRect.y, detectionRect.width, detectionRect.height);			}			dispatchEvent ( new DetectionEvent (DetectionEvent.DETECT, detectionRect) );		}	}}